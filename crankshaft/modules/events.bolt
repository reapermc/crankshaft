from wicked_expressions:api import Scoreboard
from ./event_handler import BuiltinEvent, event
from ./flag_handler import flag
from ./cwd import get_cwd

class Load(BuiltinEvent):
    def __event_init__(self):
        merge function_tag minecraft:load {"values": [get_cwd()]}
        self.trigger()

class Tick(BuiltinEvent):
    def __event_init__(self):
        merge function_tag minecraft:tick {"values": [get_cwd()]}
        self.trigger()

class PlayerTick(BuiltinEvent):
    @event
    def tick(self):
        as @a at @s:
            self.trigger()

class PlayerJoin(BuiltinEvent):
    @event
    def player_tick(self):
        join_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.join_tracker", 'custom:leave_game')['@s']

        if join_tracker >= 1:
            join_tracker = 0
            self.trigger()

class PlayerLoad(BuiltinEvent):
    @event
    def load(self):
        as @a at @s:
            self.trigger()
    
    @event
    def player_join(self):
        self.trigger()

class PlayerShotBow(BuiltinEvent):
    @event
    def player_tick(self):
        use_item_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.shot_bow", 'used:bow')['@s']
        charge_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.charge_time")['@s']

        if flag.is_charging_bow == True:
            charge_time_tracker += 1
        if flag.is_charging_bow == False:
            charge_time_tracker = 0

        if use_item_tracker >= 1:
            use_item_tracker = 0
            self.trigger(charge_time=charge_time_tracker)
