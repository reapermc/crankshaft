from wicked_expressions:api import Scoreboard
from lightning_rod:api import revoke_advancement, add_tag, remove_tag
from ./event_handler/event_definition import BuiltinEvent
from ./event_handler/listeners import dependency, early_dependency
from ./flag_handler import flag
from ./cwd import get_cwd

class Load(BuiltinEvent):
    def __event_init__(self):
        merge function_tag minecraft:load {"values": [get_cwd()]}
        self.trigger()

class Tick(BuiltinEvent):
    def __event_init__(self):
        merge function_tag minecraft:tick {"values": [get_cwd()]}
        self.trigger()

class PlayerTick(BuiltinEvent):
    @dependency
    def tick(self):
        as @a at @s:
            self.trigger()

class PlayerJoin(BuiltinEvent):
    @dependency
    def player_tick(self):
        join_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.join", 'custom:leave_game')['@s']

        # if join_tracker >= 1:
        if score var join_tracker matches 1..:
            join_tracker = 0
            self.trigger()

class PlayerLoad(BuiltinEvent):
    @dependency
    def load(self):
        as @a at @s:
            self.trigger()

    @dependency
    def player_join(self):
        self.trigger()

class PlayerChargeBow(BuiltinEvent):
    def __event_init__(self):
        self.charge_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.charge_time")['@s']
        self.charging_tag = f"{self.TAG_ROOT}.charging"
        advancement_path = f"{get_cwd()}/on_charge"
        advancement_reward_path = f"{get_cwd()}/reward"
        advancement advancement_path {
            "criteria": {
                "requirement": {
                    "trigger": "minecraft:using_item",
                    "conditions": {
                        "item": {
                            "items": [
                                "minecraft:bow"
                            ]
                        }
                    }
                }
            },
            "rewards": {
                "function": advancement_reward_path
            }
        }

        function advancement_reward_path:
            add_tag(self.charging_tag)
            self.charge_time_tracker += 1
            self.trigger(charge_time=self.charge_time_tracker)
            revoke_advancement(advancement_path)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.charging_tag]:
            self.charge_time_tracker = 0
        remove_tag(self.charging_tag)

class PlayerChargeBowStart(BuiltinEvent):
    @early_dependency
    def player_charge_bow(self, charge_time):
        # if charge_time == 1:
        if score var charge_time matches 1:
            self.trigger()

class PlayerChargeBowEnd(BuiltinEvent):
    def __event_init__(self):
        self.charge_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.charge_time")['@s']
        self.charging_tag = f"{self.TAG_ROOT}.charging"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_charge_bow(self, charge_time):
        self.charge_time_tracker = charge_time
        add_tag(self.charging_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.charging_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(charge_time=self.charge_time_tracker)
        remove_tag(self.charging_tag)

class PlayerShotBow(BuiltinEvent):
    def __event_init__(self):
        self.charge_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.charge_time")['@s']
        self.use_item_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.shot_bow", 'used:bow')['@s']

    @dependency
    def player_charge_bow(self, charge_time):
        self.charge_time_tracker = charge_time

    @dependency
    def player_tick(self):
        # if self.use_item_tracker >= 1:
        if score var self.use_item_tracker matches 1..:
            self.use_item_tracker = 0
            self.trigger(charge_time=self.charge_time_tracker)

class PlayerUseCoas(BuiltinEvent):
    @dependency
    def player_tick(self):
        use_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.use", 'used:carrot_on_a_stick')['@s']

        # if death_tracker >= 1:
        if score var use_tracker matches 1..:
            use_tracker = 0
            self.trigger()

class PlayerUseWfoas(BuiltinEvent):
    @dependency
    def player_tick(self):
        use_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.use", 'used:warped_fungus_on_a_stick')['@s']

        # if death_tracker >= 1:
        if score var use_tracker matches 1..:
            use_tracker = 0
            self.trigger()

class PlayerJump(BuiltinEvent):
    @dependency
    def player_tick(self):
        jump_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.jump", 'custom:jump')['@s']

        # if jump_tracker >= 1:
        if score var jump_tracker matches 1..:
            jump_tracker = 0
            self.trigger()

class PlayerLand(BuiltinEvent):
    @dependency
    def player_tick(self):
        airborne_tag = f"{self.TAG_ROOT}.airborne"

        if flag.is_airborne == True:
            add_tag(airborne_tag)
        if flag.is_airborne == False:
            if entity @s[tag=airborne_tag]:
                remove_tag(airborne_tag)
                self.trigger()

class PlayerDie(BuiltinEvent):
    @dependency
    def player_tick(self):
        death_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.death", 'deathCount')['@s']

        # if death_tracker >= 1:
        if score var death_tracker matches 1..:
            death_tracker = 0
            self.trigger()

class PlayerRespawn(BuiltinEvent):
    @dependency
    def tick(self):
        death_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.death", 'deathCount')['@s']

        # unlike '@a', '@e[type=player]'
        # only targets alive players
        as @e[type=player] at @s:
            # if death_tracker >= 1:
            if score var death_tracker matches 1..:
                death_tracker = 0
                self.trigger()

class PlayerAirborne(BuiltinEvent):
    @dependency
    def player_tick(self):
        air_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.air_time")['@s']

        if flag.is_airborne == True:
            air_time_tracker += 1
            self.trigger(air_time=air_time_tracker)
        if flag.is_airborne == False:
            air_time_tracker = 0

class PlayerAirborneStart(BuiltinEvent):
    @early_dependency
    def player_airborne(self, air_time):
        # if charge_time == 1:
        if score var air_time matches 1:
            self.trigger()

class PlayerAirborneEnd(BuiltinEvent):
    def __event_init__(self):
        self.air_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.air_time")['@s']
        self.airborne_tag = f"{self.TAG_ROOT}.airborne"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_airborne(self, air_time):
        self.air_time_tracker = air_time
        add_tag(self.airborne_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.airborne_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(air_time=self.air_time_tracker)
        remove_tag(self.airborne_tag)

class PlayerSneak(BuiltinEvent):
    @dependency
    def player_tick(self):
        sneak_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.sneak_time")['@s']

        if flag.is_sneaking == True:
            sneak_time_tracker += 1
            self.trigger(sneak_time=sneak_time_tracker)
        if flag.is_sneaking == False:
            sneak_time_tracker = 0

class PlayerSneakStart(BuiltinEvent):
    @early_dependency
    def player_sneak(self, sneak_time):
        # if charge_time == 1:
        if score var sneak_time matches 1:
            self.trigger()

class PlayerSneakEnd(BuiltinEvent):
    def __event_init__(self):
        self.sneak_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.sneak_time")['@s']
        self.sneaking_tag = f"{self.TAG_ROOT}.sneaking"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_sneak(self, sneak_time):
        self.sneak_time_tracker = sneak_time
        add_tag(self.sneaking_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.sneaking_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(sneak_time=self.sneak_time_tracker)
        remove_tag(self.sneaking_tag)

class PlayerSprint(BuiltinEvent):
    @dependency
    def player_tick(self):
        sprint_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.sprint_time")['@s']

        if flag.is_sprinting == True:
            sprint_time_tracker += 1
            self.trigger(sprint_time=sprint_time_tracker)
        if flag.is_sprinting == False:
            sprint_time_tracker = 0

class PlayerSprintStart(BuiltinEvent):
    @early_dependency
    def player_sprint(self, sprint_time):
        # if sprint_time == 1:
        if score var sprint_time matches 1:
            self.trigger()

class PlayerSprintEnd(BuiltinEvent):
    def __event_init__(self):
        self.sprint_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.sprint_time")['@s']
        self.sprinting_tag = f"{self.TAG_ROOT}.sprinting"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_sprint(self, sprint_time):
        self.sprint_time_tracker = sprint_time
        add_tag(self.sprinting_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.sprinting_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(sprint_time=self.sprint_time_tracker)
        remove_tag(self.sprinting_tag)

class PlayerSwim(BuiltinEvent):
    @dependency
    def player_tick(self):
        swim_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.swim_time")['@s']

        if flag.is_swimming == True:
            swim_time_tracker += 1
            self.trigger(swim_time=swim_time_tracker)
        if flag.is_swimming == False:
            swim_time_tracker = 0

class PlayerSwimStart(BuiltinEvent):
    @early_dependency
    def player_swim(self, swim_time):
        # if swim_time == 1:
        if score var swim_time matches 1:
            self.trigger()

class PlayerSwimEnd(BuiltinEvent):
    def __event_init__(self):
        self.swim_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.swim_time")['@s']
        self.swimming_tag = f"{self.TAG_ROOT}.swimming"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_swim(self, swim_time):
        self.swim_time_tracker = swim_time
        add_tag(self.swimming_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.swimming_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(swim_time=self.swim_time_tracker)
        remove_tag(self.swimming_tag)

class PlayerGlide(BuiltinEvent):
    @dependency
    def player_tick(self):
        glide_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.glide_time")['@s']

        if flag.is_gliding == True:
            glide_time_tracker += 1
            self.trigger(glide_time=glide_time_tracker)
        if flag.is_gliding == False:
            glide_time_tracker = 0

class PlayerGlideStart(BuiltinEvent):
    @early_dependency
    def player_glide(self, glide_time):
        # if glide_time == 1:
        if score var glide_time matches 1:
            self.trigger()

class PlayerGlideEnd(BuiltinEvent):
    def __event_init__(self):
        self.glide_time_tracker = Scoreboard(f"{self.SCOREBOARD_ROOT}.glide_time")['@s']
        self.gliding_tag = f"{self.TAG_ROOT}.gliding"
        self.temp = f"{self.TAG_ROOT}.temp"

    @dependency
    def player_glide(self, glide_time):
        self.glide_time_tracker = glide_time
        add_tag(self.gliding_tag)
        add_tag(self.temp)

    @dependency
    def player_tick(self):
        if entity @s[tag=!self.gliding_tag]:
            if entity @s[tag=self.temp]:
                remove_tag(self.temp)
                self.trigger(glide_time=self.glide_time_tracker)
        remove_tag(self.gliding_tag)

class PlayerInventoryChange(BuiltinEvent):
    def __event_init__(self):
        advancement_path = f"{get_cwd()}/on_charge"
        advancement_reward_path = f"{get_cwd()}/reward"
        advancement advancement_path {
            "criteria": {
                    "requirement": {
                    "trigger": "minecraft:inventory_changed"
                }
            },
            "rewards": {
                "function": advancement_reward_path
            }
        }

        function advancement_reward_path:
            self.trigger()
            revoke_advancement(advancement_path)
