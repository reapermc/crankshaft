from wicked_expressions:api import StaticVar, this
from wicked_expressions:nbtlib import Bool
from lightning_rod:api import tag, untag
from ../event_handler import BuiltinEvent
from ../lib/entity_hit_matching/api import append_player_trigger
from ../config import Config
from ../utils import selector


def handler(event):
    has_owner = StaticVar(Bool)
    victim_tag = f"{Config.TAG_ROOT}.event.{event.id}.victim"
    attacker_tag = f"{Config.TAG_ROOT}.event.{event.id}.attacker"
    direct_tag = f"{Config.TAG_ROOT}.event.{event.id}.direct"
    victim = selector(f"@a[tag={victim_tag}, limit=1]")
    attacker = selector(f"@e[tag={attacker_tag}, limit=1]")
    direct = selector(f"@e[tag={direct_tag}, limit=1]")
    entrypoint = event.path('entrypoint')

    append_player_trigger(entrypoint)
    function entrypoint:
        as @e if score @s reapermc.crankshaft.lib.ehm.id = $direct reapermc.crankshaft.lib.ehm.id function event.path('nested_0'):
            with has_owner.store(mode='success'):
                this.Owner.get()

            if has_owner == 1:
                tag(direct_tag)

                on origin:
                    tag(attacker_tag)
            else:
                tag(attacker_tag)

        tag(victim_tag)

        as attacker:
            event.trigger(victim, direct)

        # cleanup 
        as victim:
            untag(victim_tag)

        as attacker:
            untag(attacker_tag)
        
        as direct:
            untag(direct_tag)


on_entity_attack_player = BuiltinEvent('on_entity_attack_player')
on_entity_attack_player.attach_handler(handler)
