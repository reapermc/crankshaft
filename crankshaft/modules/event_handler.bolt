from dataclasses import dataclass, field
from typing import ClassVar, Callable, Any

from ./config import Config

# would use an enum here, but bolt doesn't support them
class Entrypoint:
    FUNCTION_TAG = 'function_tag'
    EVENT = 'event'

@dataclass
class BuiltinEvent:
    id: str

    is_active: bool = field(init=False, default=False)
    handler_index: int = field(init=False, repr=False, default=0)
    payload_index: int = field(init=False, repr=False, default=0)
    attached_handlers: list[tuple] = field(init=False, repr=False, default_factory=list)
    parent_events: list[Callable] = field(init=False, repr=False, default_factory=list)
    payload_params: Any = field(init=False, repr=False, default=None)

    LOCAL_PATH: ClassVar[str] = f"{Config.ROOT_LOCAL}/event_handler/builtin"
    GLOBAL_PATH: ClassVar[str] = f"{Config.ROOT}/event_handler/builtin"

    def __post_init__(self):
        self.endpoint_path = f"{self.GLOBAL_PATH}/endpoint/{self.id}"

        self._initialize_endpoint()

    def attach_handler(self, handler: Callable, entrypoint: Any = None, entrypoint_type: str = None):
        handler_path = self._generate_handler_path()
        handler_data = (handler, handler_path)
        self.attached_handlers.append(handler_data)

        # this is needed so potential entrypoint
        # function_tag doesn't brick itself
        function handler_path:
            ...

        if entrypoint_type == Entrypoint.FUNCTION_TAG:
            merge function_tag entrypoint {"replace": false, "values": [handler_path]}
        elif entrypoint_type == Entrypoint.EVENT:
            # entrypoint.endpoint_path directly
            # hooks into the target parent event
            merge function_tag entrypoint.endpoint_path {"replace": false, "values": [handler_path]}
            self.parent_events.append(entrypoint)         

    def attach_payload(self, payload: Callable):
        payload_path = self._generate_payload_path()

        merge function_tag self.endpoint_path {"replace": false, "values": [payload_path]}

        append function payload_path:
            payload(*self.payload_params)

    def trigger(self, *params):
        self.payload_params = params
        function f"#{self.endpoint_path}"

    def activate(self):
        self._activate_parent_events()
        self._deploy_handlers()
        self.is_active = True

    def path(self, subpath: str):
        return f"{self.GLOBAL_PATH}/handler/{self.id}/{subpath}"

    def _activate_parent_events(self):
        for event in self.parent_events:
            if event.is_active:
                continue

            event.activate()

    def _deploy_handlers(self):
        for handler, handler_path in self.attached_handlers:
            append function handler_path:
                handler(self)

    def _generate_handler_path(self):
        base_path = f"{self.GLOBAL_PATH}/handler/{self.id}"
        index = self.handler_index
        self.handler_index += 1

        return f"{base_path}/{index}"

    def _generate_payload_path(self):
        base_path = f"{self.LOCAL_PATH}/payload/{self.id}"
        index = self.payload_index
        self.payload_index += 1

        return f"{base_path}/{index}"

    def _initialize_endpoint(self):
        merge function_tag self.endpoint_path {"replace": false, "values": []}

@dataclass
class Event(BuiltinEvent):
    # user defined events only run off the local namespace
    # so we simply inherit and set GLOBAL_PATH to a local one

    LOCAL_PATH: ClassVar[str] = f"{Config.ROOT_LOCAL}/event_handler/user_defined"
    GLOBAL_PATH: ClassVar[str] = f"{Config.ROOT_LOCAL}/event_handler/user_defined"

@dataclass
class Listener:
    event: BuiltinEvent | Event

    def __call__(self, payload: Callable):
        if not self.event.is_active:
            self.event.activate()

        self.event.attach_payload(payload)
